-------------- Encapsulation --------------

Encapsulation can be used 
if the properties of the object are private 
and updating them through public methods.

class Car {
    private $brand;
    private $model;
    private $year;

    public function __construct($brand, $model, $year) {
        $this->brand = $brand;
        $this->model = $model;
        $this->year = $year;
    }

    public function getBrand() {
        return $this->brand;
    }

    public function getModel() {
        return $this->model;
    }

    public function getYear() {
        return $this->year;
    }

    public function setYear($year) {
        $this->year = $year;
    }
}

// Create a Car object
$car = new Car("Toyota", "Camry", 2020);

// Access and display the brand, model, and year
echo "Brand: " . $car->getBrand() . "\n";
echo "Model: " . $car->getModel() . "\n";
echo "Year: " . $car->getYear() . "\n";

// Update the year using the setYear() method
$car->setYear(2022);

// Display the updated year
echo "Updated Year: " . $car->getYear() . "\n";

-------------- Abstraction --------------

Abstraction is a concept in which 
a class has methods without implementation. 
The idea is to have a template 
and let the child class that inherits 
the parent class implement the method.

abstract class Person
{
    public $name;
    abstract protected function Info($n);
}

class Dr extends Person
{
    public function Info($n)
    {
        $this->name = $n;
        return $this->name;
    } 
}

$Dr = new Dr;
echo $Dr->Info("Anik");

-------------- Inheritance --------------

Inheritance in OOP = When a class derives 
from another class.
An inherited class is defined by 
using the extends keyword.

class Manager {

}

class Manager extends Employe{

}

-------------- Polymorphism --------------

The implements keyword is used to 
declare that a class must have 
the methods described in 
the specified interface. 
This is called polymorphism.

interface Animal
{
    public function makeSound();
}

class Cat implements Animal
{
    public function makeSound()
    {
        echo " Meow ";
    }
}

class Dog implements Animal
{
    public function makeSound()
    {
        echo " Bhau ";
    }
}

$cat = new Cat;
$cat->makeSound();

$dog = new Dog;
$dog->makeSound();
